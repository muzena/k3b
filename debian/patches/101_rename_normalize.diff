Description: normalize is named "normalize-audio" in Debian.
 Change that everywhere.... for real this time
Reviewed-by: Didier Raboud <didier@raboud.com>
Updated-by: Roderick B. Greening <roderick.greening@gmail.com>
Updated-by: Pino Toscano <pino@debian.org>
Last-Update: 2017-12-24

---
 libk3b/core/k3bdefaultexternalprograms.cpp       |    8 +++++++-
 libk3b/core/k3bdefaultexternalprograms.h         |    3 +++
 libk3b/projects/audiocd/k3baudiodoc.cpp          |    4 ++--
 libk3b/projects/audiocd/k3baudionormalizejob.cpp |   12 ++++++------
 src/k3bprojectmanager.cpp                        |    4 ++--
 src/projects/k3baudioburndialog.cpp              |   12 ++++++------
 src/projects/k3bmixedburndialog.cpp              |   12 ++++++------
 7 files changed, 32 insertions(+), 23 deletions(-)

--- a/libk3b/core/k3bdefaultexternalprograms.cpp
+++ b/libk3b/core/k3bdefaultexternalprograms.cpp
@@ -429,11 +429,17 @@ QString K3b::VcdbuilderProgram::versionI
 
 
 K3b::NormalizeProgram::NormalizeProgram()
-    : K3b::SimpleExternalProgram( "normalize" )
+    : K3b::SimpleExternalProgram( "normalize-audio" )
 {
 }
 
 
+QString K3b::NormalizeProgram::versionIdentifier( const ExternalBin& /*bin*/ ) const
+{
+    return QLatin1String( "normalize" );
+}
+
+
 K3b::GrowisofsProgram::GrowisofsProgram()
     : K3b::SimpleExternalProgram( "growisofs" )
 {
--- a/libk3b/projects/audiocd/k3baudiodoc.cpp
+++ b/libk3b/projects/audiocd/k3baudiodoc.cpp
@@ -591,7 +591,7 @@ bool K3b::AudioDoc::loadDocumentData( QD
                 return false;
         }
 
-        else if( e.nodeName() == "normalize" )
+        else if( e.nodeName() == "normalize-audio" )
             setNormalize( e.text() == "yes" );
 
         else if( e.nodeName() == "hide_first_track" )
@@ -795,7 +795,7 @@ bool K3b::AudioDoc::saveDocumentData( QD
     saveGeneralDocumentData( docElem );
 
     // add normalize
-    QDomElement normalizeElem = doc.createElement( "normalize" );
+    QDomElement normalizeElem = doc.createElement( "normalize-audio" );
     normalizeElem.appendChild( doc.createTextNode( normalize() ? "yes" : "no" ) );
     docElem->appendChild( normalizeElem );
 
--- a/libk3b/projects/audiocd/k3baudionormalizejob.cpp
+++ b/libk3b/projects/audiocd/k3baudionormalizejob.cpp
@@ -50,10 +50,10 @@ void K3b::AudioNormalizeJob::start()
     connect( m_process, SIGNAL(stderrLine(QString)), this, SLOT(slotStdLine(QString)) );
     connect( m_process, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(slotProcessExited(int,QProcess::ExitStatus)) );
 
-    const K3b::ExternalBin* bin = k3bcore->externalBinManager()->binObject( "normalize" );
+    const K3b::ExternalBin* bin = k3bcore->externalBinManager()->binObject( "normalize-audio" );
 
     if( !bin ) {
-        emit infoMessage( i18n("Could not find normalize executable."), MessageError );
+        emit infoMessage( i18n("Could not find normalize-audio executable."), MessageError );
         jobFinished(false);
         return;
     }
@@ -80,8 +80,8 @@ void K3b::AudioNormalizeJob::start()
     if( !m_process->start( KProcess::OnlyStderrChannel ) ) {
         // something went wrong when starting the program
         // it "should" be the executable
-        qDebug() << "(K3b::AudioNormalizeJob) could not start normalize";
-        emit infoMessage( i18n("Could not start normalize."), K3b::Job::MessageError );
+        qDebug() << "(K3b::AudioNormalizeJob) could not start normalize-audio";
+        emit infoMessage( i18n("Could not start normalize-audio."), K3b::Job::MessageError );
         jobFinished(false);
     }
 }
@@ -104,7 +104,7 @@ void K3b::AudioNormalizeJob::slotStdLine
 
     //  emit newSubTask( i18n("Normalizing track %1 of %2 (%3)",t,tt,m_files.at(t-1)) );
 
-    emit debuggingOutput( "normalize", line );
+    emit debuggingOutput( "normalize-audio", line );
 
     // wenn "% done" drin:
     //    wenn ein --% drin ist, so beginnt ein neuer track
@@ -183,7 +183,7 @@ void K3b::AudioNormalizeJob::slotProcess
             break;
         default:
             if( !m_canceled ) {
-                emit infoMessage( i18n("%1 returned an unknown error (code %2).",QString("normalize"), exitCode),
+                emit infoMessage( i18n("%1 returned an unknown error (code %2).",QString("normalize-audio"), exitCode),
                                   K3b::Job::MessageError );
                 emit infoMessage( i18n("Please send me an email with the last output."), K3b::Job::MessageError );
                 emit infoMessage( i18n("Error while normalizing tracks."), MessageError );
--- a/src/k3bprojectmanager.cpp
+++ b/src/k3bprojectmanager.cpp
@@ -311,7 +311,7 @@ void K3b::ProjectManager::loadDefaults(
 
         audioDoc->writeCdText( c.readEntry( "cd_text", true ) );
         audioDoc->setHideFirstTrack( c.readEntry( "hide_first_track", false ) );
-        audioDoc->setNormalize( c.readEntry( "normalize", false ) );
+        audioDoc->setNormalize( c.readEntry( "normalize-audio", false ) );
         audioDoc->setAudioRippingParanoiaMode( c.readEntry( "paranoia mode", 0 ) );
         audioDoc->setAudioRippingRetries( c.readEntry( "read retries", 128 ) );
         audioDoc->setAudioRippingIgnoreReadErrors( c.readEntry( "ignore read errors", false ) );
@@ -382,7 +382,7 @@ void K3b::ProjectManager::loadDefaults(
         K3b::MixedDoc* mixedDoc = static_cast<K3b::MixedDoc*>(doc);
 
         mixedDoc->audioDoc()->writeCdText( c.readEntry( "cd_text", true ) );
-        mixedDoc->audioDoc()->setNormalize( c.readEntry( "normalize", false ) );
+        mixedDoc->audioDoc()->setNormalize( c.readEntry( "normalize-audio", false ) );
 
         // load mixed type
         if( c.readEntry( "mixed_type" ) == "last_track" )
--- a/src/projects/k3baudioburndialog.cpp
+++ b/src/projects/k3baudioburndialog.cpp
@@ -191,7 +191,7 @@ void K3b::AudioBurnDialog::loadSettings(
 
     m_cdtextWidget->setChecked( c.readEntry( "cd_text", true ) );
     m_checkHideFirstTrack->setChecked( c.readEntry( "hide_first_track", false ) );
-    m_checkNormalize->setChecked( c.readEntry( "normalize", false ) );
+    m_checkNormalize->setChecked( c.readEntry( "normalize-audio", false ) );
 
     m_comboParanoiaMode->setCurrentIndex( c.readEntry( "paranoia mode", 0 ) );
     m_checkAudioRippingIgnoreReadErrors->setChecked( c.readEntry( "ignore read errors", true ) );
@@ -207,7 +207,7 @@ void K3b::AudioBurnDialog::saveSettings(
 
     c.writeEntry( "cd_text", m_cdtextWidget->isChecked() );
     c.writeEntry( "hide_first_track", m_checkHideFirstTrack->isChecked() );
-    c.writeEntry( "normalize", m_checkNormalize->isChecked() );
+    c.writeEntry( "normalize-audio", m_checkNormalize->isChecked() );
 
     c.writeEntry( "paranoia mode", m_comboParanoiaMode->currentText() );
     c.writeEntry( "ignore read errors", m_checkAudioRippingIgnoreReadErrors->isChecked() );
@@ -288,11 +288,11 @@ void K3b::AudioBurnDialog::slotNormalize
 {
     if( on ) {
         // we are not able to normalize in on-the-fly mode
-        if( !k3bcore->externalBinManager()->foundBin( "normalize" ) ) {
-            KMessageBox::sorry( this, i18n("<p><b>External program <em>normalize</em> is not installed.</b>"
-                                           "<p>K3b uses <em>normalize</em> (http://normalize.nongnu.org/) "
+        if( !k3bcore->externalBinManager()->foundBin( "normalize-audio" ) ) {
+            KMessageBox::sorry( this, i18n("<p><b>External program <em>normalize-audio</em> is not installed.</b>"
+                                           "<p>K3b uses <em>normalize-audio</em> (http://normalize.nongnu.org/) "
                                            "to normalize audio tracks. In order to "
-                                           "use this functionality, please install it first.") );
+                                           "use this functionality, please install it first. (sudo apt-get install normalize-audio) " ) );
             m_checkNormalize->setChecked( false );
         }
         else if( !m_checkCacheImage->isChecked() && !m_checkOnlyCreateImage->isChecked() ) {
--- a/src/projects/k3bmixedburndialog.cpp
+++ b/src/projects/k3bmixedburndialog.cpp
@@ -195,7 +195,7 @@ void K3b::MixedBurnDialog::loadSettings(
     K3b::ProjectBurnDialog::loadSettings( c );
 
     m_cdtextWidget->setChecked( c.readEntry( "cd_text", false ) );
-    m_checkNormalize->setChecked( c.readEntry( "normalize", false ) );
+    m_checkNormalize->setChecked( c.readEntry( "normalize-audio", false ) );
 
     // load mixed type
     if( c.readEntry( "mixed_type" ) == "last_track" )
@@ -219,7 +219,7 @@ void K3b::MixedBurnDialog::saveSettings(
     K3b::ProjectBurnDialog::saveSettings(c);
 
     c.writeEntry( "cd_text", m_cdtextWidget->isChecked() );
-    c.writeEntry( "normalize", m_checkNormalize->isChecked() );
+    c.writeEntry( "normalize-audio", m_checkNormalize->isChecked() );
 
     // save mixed type
     switch( m_comboMixedModeType->selectedValue() ) {
@@ -283,11 +283,11 @@ void K3b::MixedBurnDialog::slotNormalize
 {
     if( on ) {
         // we are not able to normalize in on-the-fly mode
-        if( !k3bcore->externalBinManager()->foundBin( "normalize" ) ) {
-            KMessageBox::sorry( this, i18n("<p><b>External program <em>normalize</em> is not installed.</b>"
-                                           "<p>K3b uses <em>normalize</em> (http://normalize.nongnu.org/) "
+        if( !k3bcore->externalBinManager()->foundBin( "normalize-audio" ) ) {
+            KMessageBox::sorry( this, i18n("<p><b>External program <em>normalize-audio</em> is not installed.</b>"
+                                           "<p>K3b uses <em>normalize-audio</em> (http://normalize.nongnu.org/) "
                                            "to normalize audio tracks. In order to "
-                                           "use this functionality, please install it first.") );
+                                           "use this functionality, please install it first (sudo apt-get install normalize-audio).") );
             m_checkNormalize->setChecked( false );
         }
         else if( !m_checkCacheImage->isChecked() && !m_checkOnlyCreateImage->isChecked() ) {
--- a/libk3b/core/k3bdefaultexternalprograms.h
+++ b/libk3b/core/k3bdefaultexternalprograms.h
@@ -123,6 +123,9 @@ namespace K3b {
     {
     public:
         NormalizeProgram();
+        
+    protected:
+        virtual QString versionIdentifier( const ExternalBin& bin ) const;
     };
 
 
